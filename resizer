import dearpygui.dearpygui as dpg
import DearPyGui_DragAndDrop as dpg_dnd
import sys
import os
import ctypes
import json

# Function to save the settings to a JSON file
def save_settings():
    with open("settings.json", "w") as file:
        json.dump(settings, file)

# Function to load the settings from a JSON file
def load_settings():
    global settings
    try:
        with open("settings.json", "r") as file:
            settings = json.load(file)
    except FileNotFoundError:
        pass

load_settings()

# Get the screen width and height using ctypes
user32 = ctypes.windll.user32
monitor_width = round(user32.GetSystemMetrics(0)/2.5)
monitor_height = round(user32.GetSystemMetrics(1)/3)

# Get the path to the bundled executable
bundle_dir = getattr(sys, '_MEIPASS', os.path.abspath(os.path.dirname(__file__)))

# Specify the font directory path relative to the bundled executable
font_dir = os.path.join(bundle_dir, "fonts")
font_path = os.path.join(font_dir, "Roboto-Bold.ttf")

dpg.create_context()
dpg_dnd.initialize()


dpg.create_viewport(title="Image resizer by axsolov ver-0.14", width=570, height=500, 
                    decorated=True, resizable=False, x_pos=monitor_width, y_pos=monitor_height)

#Load settings
dpg.set_viewport_always_top(settings["always_on_top"])

#Theme
with dpg.theme() as hover_drag_theme:
    with dpg.theme_component(dpg.mvAll):
        dpg.add_theme_color(dpg.mvThemeCol_Border, (0, 180, 255), category=dpg.mvThemeCat_Core)
        dpg.add_theme_color(dpg.mvThemeCol_PopupBg, (25, 50, 75), category=dpg.mvThemeCat_Core)

#Font
with dpg.font_registry():
    try:
        def_font = dpg.add_font(font_path, 20)
        def_font2 = dpg.add_font(font_path, 26)
        small_font = dpg.add_font(font_path, 13)
        help_font = dpg.add_font(font_path, 16)
        dpg.bind_font(def_font)
    except SystemError:
        def_font = dpg.add_font('Roboto-Bold.ttf', 20)
        def_font2 = dpg.add_font('Roboto-Bold.ttf', 26)
        small_font = dpg.add_font('Roboto-Bold.ttf', 13)
        help_font = dpg.add_font('Roboto-Bold.ttf', 16)
               
    dpg.bind_font(def_font)

#Global font scale
with dpg.handler_registry():
    dpg.set_global_font_scale(1)


mode = "RGB" #default value for mode

#Button callbacks with Mode text changer
def changer(sender, appdata):

    button_tag = dpg.get_item_user_data(sender)
    if button_tag == "1000p":
        dpg.set_value(unique_id, 1000) 
    elif button_tag == "150p":
        dpg.set_value(unique_id, 150) 
    elif button_tag == "Other size":
        dpg.get_value(unique_id)
    elif button_tag in ["RGB", "P", "L"]:
        global mode
        mode = button_tag
        items_to_delete = ["current_mode", "current_mode_text", "current_mode_text2", "current_mode_text3"]

        for item in items_to_delete:
            if dpg.does_item_exist(item):
                dpg.delete_item(item)
    
        dpg.add_text(f"{button_tag}", pos=[32, 253], parent="modes button set", tag="current_mode")
    
#Resizer script
def resizing_images(data):
    from PIL import Image
    resized = []
    size = dpg.get_value(unique_id)

    for image in data:
        with open(image, 'rb') as file:
            img = Image.open(file)
            basewidth = size
            if img.size[0] >= img.size[1]:
                wpercent = (basewidth/float(img.size[0]))
                hsize = int((float(img.size[1])*float(wpercent)))
                img = img.resize((basewidth, hsize), Image.LANCZOS)
                a = img.convert(f"{mode}", palette=Image.ADAPTIVE)
                resized.append((image, a)) 
            else:
                newheight = basewidth
                wpercent = basewidth/float(img.size[1])
                newwidth = int((float(img.size[0])*float(wpercent)))
                img = img.resize((newwidth, newheight), Image.LANCZOS)
                a = img.convert(f"{mode}", palette=Image.ADAPTIVE)
                resized.append((image, a))

    output_folder = "resized_images"
    
    for image, new in resized:
        base_dir = os.path.dirname(image)
        os.makedirs(os.path.join(base_dir, output_folder), exist_ok=True)  # Create the new folder in the same directory

        base_name = os.path.splitext(os.path.basename(image))[0]
        #output_path = os.path.join(base_dir, output_folder, '{}{}{}{}{}{}'.format(base_name," mode_", mode," ", size, "px.png"))
        output_path = os.path.join(base_dir, output_folder, f"{base_name} mode_{mode} {size}px.png")
        new.save(output_path)

    '''For replacing original images
    for(image, new) in resized:  
        new.save(image) '''

#File Selector
def callbackfile(sender, app_data):
    selected_file_path = app_data['selections']
    selected_file_paths = list(selected_file_path.values())
    resizing_images(selected_file_paths)

with dpg.file_dialog(directory_selector=False, show=False, callback=callbackfile, file_count=1000, tag="file_dialog_tag", width=400 ,height=200, min_size=[400,400], max_size=[800,800], default_path="C:"):
    dpg.add_file_extension("", color=(255, 150, 150, 255))
    dpg.add_file_extension(".*")
    dpg.add_file_extension(".jpeg", color=(0, 255, 0, 255))
    dpg.add_file_extension(".png", color=(0, 255, 0, 255))
    dpg.add_file_extension(".bmp", color=(0, 255, 0, 255))

#Help 
def show_help():
    file_path = os.path.join(bundle_dir, "help text.txt")
    try:
        with open(file_path, "r") as file:
            help_file = file.read()
    except SystemError:
        with open(r"C:\Users\USER\Python\help text.txt", "r") as file:
            help_file = file.read()

    with dpg.window(label="Help Window", tag="help_window", modal=True, no_title_bar=True, no_move=True):
        def help_text():
            content_width = 530
            dpg.add_button(label="Close", callback=close_help_window, width=content_width)
            dpg.bind_item_font(dpg.add_text(help_file, parent="help_window", tag="Help content", wrap=content_width), help_font)
            dpg.add_button(label="Close", callback=close_help_window, width=content_width)

        def close_help_window():
            dpg.delete_item("help_window")

        help_text()

#AOT window script
def always_on_top(sender, app_data):
    is_always_on_top = dpg.is_viewport_always_top()
    if not is_always_on_top: 
        settings["always_on_top"] = True
        dpg.set_viewport_always_top(settings["always_on_top"])
        dpg.set_item_label(sender, "Always on top: On")
        save_settings()
    else:
        settings["always_on_top"] = False
        dpg.set_viewport_always_top(settings["always_on_top"])
        dpg.set_item_label(sender, "Always on top: Off")
        save_settings()

#Setting window
def settings_window():
    with dpg.window(label="Settings Window", tag="settings_window", modal=False, no_title_bar=True, no_move=True):
        with dpg.group():
            aot_button_lable = dpg.add_button(width=230, callback=always_on_top)
            #frame_rounding_val = dpg.add_slider_float(default_value=1, min_value=0.5, max_value=2, format='%.1f')
            #frame_rounding_val = dpg.add_slider_int(default_value=0, min_value=0, max_value=22)
            
            if settings["always_on_top"] == True: 
                dpg.set_item_label(aot_button_lable, "Always on top: On")
            else: 
                dpg.set_item_label(aot_button_lable, "Always on top: Off")
        
        with dpg.menu_bar():
            with dpg.group(pos=[220,0]):
                dpg.add_menu_item(label="X", callback=lambda: dpg.delete_item("settings_window"))

#MenuBar
with dpg.viewport_menu_bar():
    with dpg.menu(label="File"):
        dpg.add_menu_item(label="Open Files...", callback=lambda: dpg.show_item("file_dialog_tag"))
    dpg.add_menu_item(label="Settings", callback=settings_window)
    dpg.add_menu_item(label="Help", callback=show_help)
    with dpg.menu(label="Tools"):

        dpg.add_menu_item(label="Show About", callback=lambda:dpg.show_tool(dpg.mvTool_About))
        dpg.add_menu_item(label="Show Metrics", callback=lambda:dpg.show_tool(dpg.mvTool_Metrics))
        dpg.add_menu_item(label="Show Documentation", callback=lambda:dpg.show_tool(dpg.mvTool_Doc))
        dpg.add_menu_item(label="Show Debug", callback=lambda:dpg.show_tool(dpg.mvTool_Debug))
        dpg.add_menu_item(label="Show Style Editor", callback=lambda:dpg.show_tool(dpg.mvTool_Style))
        dpg.add_menu_item(label="Show Font Manager", callback=lambda:dpg.show_tool(dpg.mvTool_Font))
        dpg.add_menu_item(label="Show Item Registry", callback=lambda:dpg.show_tool(dpg.mvTool_ItemRegistry))



#Main window
with dpg.window() as window:
    drop_text = dpg.add_text(show=False)
    drop_keys = dpg.add_text(show=False)

    #Resize buttons
    with dpg.group(pos=[105,0]):
        dpg.add_spacer(height=37)
        dpg.bind_item_font(dpg.add_text("Choose image size:"), def_font2)
        dpg.add_button(label="Resize to max\n 150 pixels", width=255, height=50, callback=changer, user_data="150p")
        dpg.add_button(label="Resize to max\n 1000 pixels", width=255, height=50, callback=changer, user_data="1000p")
        dpg.add_button(label="Other size in pixels\n Click here to apply", width=255, height=50, callback=changer, user_data="Other size")
      
        #Pixel input bar
        unique_id = dpg.add_input_int(label="Pixels", width=255)

    #Modes buttons
    with dpg.group(pos=[12,30], tag="modes button set"):
        dpg.add_text("Image\nModes:")
        dpg.add_button(label="  RGB\n(24-Bit)", width=86, height=50, callback=changer, user_data="RGB")
        dpg.add_button(label="    P\n(8-Bit)", width=86, height=50, callback=changer, user_data="P")
        dpg.add_button(label="Greyscale\n L (8-Bit)", width=86, height=50, callback=changer, user_data="L")
        dpg.bind_item_font(dpg.add_text("Current Mode:"), small_font)
        dpg.add_text("RGB",pos=[32,253], tag="current_mode")


dpg.set_primary_window(window, True)

#Drop window
with dpg.window(modal=False, no_move=True, autosize=True, show=True, 
                min_size=[500,120], no_scrollbar=True, pos=[25,310], no_title_bar=True) as drop_window:
    dpg.add_text("Drag & Drop images here!", color=(0, 255, 0), pos=[145,40])
    
def drop(data, keys):

    dpg.configure_item(drop_window, show=True)
    dpg.bind_item_theme(drop_window, None)
    dpg_dnd.set_drop_effect()
    dpg.set_value(drop_text, f'{data}')
    #dpg.set_value(drop_keys, f'{keys}')

    resizing_images(data)
    
    #Error message
    def Function():
        try:
            resizing_images(data)
        except ValueError as e:
            print(e)
        '''  if dpg.does_item_exist("error_text"):
                dpg.configure_item("error_text", text=str(e))
            else:
                dpg.add_text(str(e), pos=[25, 260], tag="error_text")'''
    Function()

def drag_over(keys):
    if dpg.is_item_hovered(drop_window):
        dpg.bind_item_theme(drop_window, hover_drag_theme)
        dpg_dnd.set_drop_effect(dpg_dnd.DROPEFFECT.MOVE)
    else:
        dpg.bind_item_theme(drop_window, None)
        dpg_dnd.set_drop_effect()

def drag_enter(data, keys):
    dpg.configure_item(drop_window, show=True)

def drag_leave():
    dpg.configure_item(drop_window, show=True)
    dpg.bind_item_theme(drop_window, None)

dpg_dnd.set_drop(drop)
dpg_dnd.set_drag_over(drag_over)
dpg_dnd.set_drag_enter(drag_enter)
dpg_dnd.set_drag_leave(drag_leave)

dpg.setup_dearpygui()
dpg.show_viewport()
dpg.start_dearpygui()
dpg.destroy_context()
